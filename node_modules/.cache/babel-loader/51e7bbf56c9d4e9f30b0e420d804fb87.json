{"ast":null,"code":"var _jsxFileName = \"/home/sachila/Projects/sample/gapstar/react/demo/src/components/Category/RemoveCategory.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Checkbox } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useEnabledCategories } from \"../../hooks/CategoryHook\";\nimport { updateCategory } from \"../../store/actions\";\nimport { useStateSelector } from \"../../store/selector\";\nimport { FormControlLabelContainer } from \"../../styles/elements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const RemoveCategory = () => {\n  _s();\n\n  const {\n    categories\n  } = useStateSelector();\n  const dispatch = useDispatch();\n  const {\n    deletedList\n  } = useEnabledCategories();\n  const deletedItemsAvailabe = deletedList && deletedList.length > 0;\n  const [selectedIds, setSelectedIds] = useState({});\n\n  const isCheckboxSelected = category => {\n    return selectedIds[category.id];\n  };\n\n  const handleOnChange = (event, category) => {\n    const checked = event.target.checked;\n    setSelectedIds(state => {\n      state[category.id] = checked;\n      return state;\n    });\n  };\n\n  const handleRestoreClick = () => {\n    Object.keys(selectedIds).forEach(id => {\n      if (selectedIds[id]) {\n        const category = categories.find(cat => cat.id === id);\n\n        if (category) {\n          category.deleted = false;\n          dispatch(updateCategory(category));\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!deletedItemsAvailabe && /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: \"grey\",\n        fontWeight: \"bold\"\n      },\n      \"data-testid\": \"deleted-items-not-found\",\n      children: \"Please remove some items\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), deletedItemsAvailabe && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        variant: \"contained\",\n        onClick: handleRestoreClick,\n        children: \"Restore\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"grid\",\n          gridTemplateColumns: \"1fr 1fr 1fr\",\n          gap: \"10px\",\n          paddingTop: \"16px\"\n        },\n        \"data-testid\": \"deleted-items-found\",\n        children: deletedList.map(category => /*#__PURE__*/_jsxDEV(FormControlLabelContainer, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, {\n            id: `${category.id}`,\n            checked: isCheckboxSelected(category),\n            value: isCheckboxSelected(category),\n            onChange: e => handleOnChange(e, category),\n            color: \"default\"\n          }, `${category.id} - ${category.name}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 19\n          }, this),\n          label: category.name\n        }, `${category.id} - ${category.name}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RemoveCategory, \"W7EEdlASQtxn19ixXJD6TthS2Qo=\", false, function () {\n  return [useStateSelector, useDispatch, useEnabledCategories];\n});\n\n_c = RemoveCategory;\nexport default RemoveCategory;\n\nvar _c;\n\n$RefreshReg$(_c, \"RemoveCategory\");","map":{"version":3,"sources":["/home/sachila/Projects/sample/gapstar/react/demo/src/components/Category/RemoveCategory.tsx"],"names":["Button","Checkbox","useState","useDispatch","useEnabledCategories","updateCategory","useStateSelector","FormControlLabelContainer","RemoveCategory","categories","dispatch","deletedList","deletedItemsAvailabe","length","selectedIds","setSelectedIds","isCheckboxSelected","category","id","handleOnChange","event","checked","target","state","handleRestoreClick","Object","keys","forEach","find","cat","deleted","color","fontWeight","display","gridTemplateColumns","gap","paddingTop","map","e","name"],"mappings":"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","sourcesContent":["import { Button, Checkbox } from \"@material-ui/core\";\nimport { ChangeEvent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useEnabledCategories } from \"../../hooks/CategoryHook\";\nimport { Category } from \"../../models/Category\";\nimport { updateCategory } from \"../../store/actions\";\nimport { useStateSelector } from \"../../store/selector\";\nimport { FormControlLabelContainer } from \"../../styles/elements\";\n\nexport const RemoveCategory: React.FC = () => {\n  const { categories } = useStateSelector();\n  const dispatch = useDispatch();\n  const { deletedList } = useEnabledCategories();\n  const deletedItemsAvailabe = deletedList && deletedList.length > 0;\n\n  const [selectedIds, setSelectedIds] = useState<{ [key: string]: boolean }>(\n    {}\n  );\n\n  const isCheckboxSelected = (category: Category) => {\n    return selectedIds[category.id];\n  };\n\n  const handleOnChange = (\n    event: ChangeEvent<HTMLInputElement>,\n    category: Category\n  ) => {\n    const checked = event.target.checked;\n\n    setSelectedIds((state) => {\n      state[category.id] = checked;\n      return state;\n    });\n  };\n\n  const handleRestoreClick = () => {\n    Object.keys(selectedIds).forEach((id) => {\n      if (selectedIds[id]) {\n        const category = categories.find((cat) => cat.id === id);\n        if (category) {\n          category.deleted = false;\n          dispatch(updateCategory(category));\n        }\n      }\n    });\n  };\n  return (\n    <div>\n      {!deletedItemsAvailabe && (\n        <span\n          style={{ color: \"grey\", fontWeight: \"bold\" }}\n          data-testid=\"deleted-items-not-found\"\n        >\n          Please remove some items\n        </span>\n      )}\n      {deletedItemsAvailabe && (\n        <>\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={handleRestoreClick}\n          >\n            Restore\n          </Button>\n          <div\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"1fr 1fr 1fr\",\n              gap: \"10px\",\n              paddingTop: \"16px\",\n            }}\n            data-testid=\"deleted-items-found\"\n          >\n            {deletedList.map((category) => (\n              <FormControlLabelContainer\n                control={\n                  <Checkbox\n                    key={`${category.id} - ${category.name}`}\n                    id={`${category.id}`}\n                    checked={isCheckboxSelected(category)}\n                    value={isCheckboxSelected(category)}\n                    onChange={(e) => handleOnChange(e, category)}\n                    color=\"default\"\n                  />\n                }\n                label={category.name}\n                key={`${category.id} - ${category.name}`}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default RemoveCategory;\n"]},"metadata":{},"sourceType":"module"}