{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport { useStateSelector } from \"../store/selector\";\nexport const useCategoryDataStructure = () => {\n  _s();\n\n  const {\n    categoriesApiData\n  } = useStateSelector(); // This support multiple root elements\n\n  return useMemo(() => {\n    const rootCategories = [];\n    const childCategories = [];\n    categoriesApiData.forEach(category => {\n      if (!category.parent || category.parent === \"0\") {\n        // these are the top level categories\n        rootCategories.push({ ...category,\n          childCategories: [],\n          enabled: false,\n          deleted: false\n        });\n      } else if (category.parent && category.parent !== \"0\") {\n        childCategories.push({ ...category,\n          enabled: false,\n          deleted: false\n        });\n      }\n    });\n    return {\n      childCategories,\n      rootCategories\n    };\n  }, [categoriesApiData]);\n};\n\n_s(useCategoryDataStructure, \"hdNyVwoQj2RRJCfmTWsFyq2VdKM=\", false, function () {\n  return [useStateSelector];\n});\n\nexport const useBuildedCategoryData = () => {\n  _s2();\n\n  const {\n    rootCategories,\n    childCategories\n  } = useCategoryDataStructure();\n  const {\n    categories\n  } = useStateSelector(); // map the categories in hirachical order based on the parent-child relationship\n\n  const setTreeStructure = rootItems => {\n    if (!rootItems.length) return rootItems;\n    rootItems.forEach(root => {\n      const childItems = childCategories.filter(cat => cat.parent === root.id); // could have multiple subcategories for one parent\n\n      if (childItems && childItems.length) {\n        childItems.forEach(child => {\n          if (!root.childCategories) root.childCategories = [];\n          root.childCategories.push({ ...child,\n            childCategories: []\n          });\n          const index = childCategories.indexOf(child); // make sure to remove subcategories once we added them to root object\n\n          childCategories.splice(index, 1);\n        });\n      }\n\n      return setTreeStructure(root.childCategories || []);\n    });\n    return rootItems;\n  }; // eslint-disable-next-line\n\n\n  return useMemo(() => setTreeStructure(rootCategories), [rootCategories, categories]);\n};\n\n_s2(useBuildedCategoryData, \"yh3YRPjwAi8pAt2cvCdwXpKpYCA=\", false, function () {\n  return [useCategoryDataStructure, useStateSelector];\n});\n\nexport const useEnabledCategories = () => {\n  _s3();\n\n  const {\n    categories\n  } = useStateSelector();\n  const enabledCategories = {};\n  const deletedCategories = {};\n\n  const checkCategories = rootItems => {\n    if (!rootItems.length) return null;\n    rootItems.forEach(root => {\n      if (root.enabled) {\n        enabledCategories[root.id] = {\n          id: root.id,\n          name: root.name,\n          deleted: root.deleted,\n          enabled: root.enabled,\n          count: root.count,\n          parent: root.parent\n        };\n      }\n\n      if (root.deleted) {\n        deletedCategories[root.id] = {\n          id: root.id,\n          name: root.name,\n          deleted: root.deleted,\n          enabled: root.enabled,\n          count: root.count,\n          parent: root.parent\n        };\n      }\n\n      checkCategories(root.childCategories || []);\n    });\n  };\n\n  checkCategories(categories);\n  const enableList = Object.values(enabledCategories);\n  const deletedList = Object.values(deletedCategories);\n  return {\n    enableList,\n    deletedList\n  };\n}; // export const useUpdateCategoryStatus = () => {\n//   const { categories } = useStateSelector();\n//   const updateStatus = (ids: string[], enabled: boolean, deleted: boolean) => {\n//     const checkCategories = (rootItems: CategoryStructure[]) => {\n//       if (!rootItems.length) return null;\n//       rootItems.forEach((root) => {\n//         if (ids.includes(root.id)) {\n//           root.enabled = enabled;\n//           root.deleted = deleted;\n//         }\n//         checkCategories(root.childCategories || []);\n//       });\n//     };\n//     checkCategories(categories);\n//   };\n//   return { updateStatus };\n// };\n\n_s3(useEnabledCategories, \"QAIzVrqfyGuSOHqLogAzd+z5syo=\", false, function () {\n  return [useStateSelector];\n});","map":{"version":3,"sources":["/home/sachila/Projects/sample/gapstar/react/demo/src/hooks/CategoryHook.ts"],"names":["useMemo","useStateSelector","useCategoryDataStructure","categoriesApiData","rootCategories","childCategories","forEach","category","parent","push","enabled","deleted","useBuildedCategoryData","categories","setTreeStructure","rootItems","length","root","childItems","filter","cat","id","child","index","indexOf","splice","useEnabledCategories","enabledCategories","deletedCategories","checkCategories","name","count","enableList","Object","values","deletedList"],"mappings":"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","sourcesContent":["import { useMemo } from \"react\";\nimport { Category } from \"../models/Category\";\nimport { CategoryStructure } from \"../models/CategoryStructure\";\nimport { useStateSelector } from \"../store/selector\";\n\nexport const useCategoryDataStructure = () => {\n  const { categoriesApiData } = useStateSelector();\n\n  // This support multiple root elements\n  return useMemo(() => {\n    const rootCategories: CategoryStructure[] = [];\n    const childCategories: CategoryStructure[] = [];\n    categoriesApiData.forEach((category) => {\n      if (!category.parent || category.parent === \"0\") {\n        // these are the top level categories\n        rootCategories.push({\n          ...category,\n          childCategories: [],\n          enabled: false,\n          deleted: false,\n        });\n      } else if (category.parent && category.parent !== \"0\") {\n        childCategories.push({\n          ...category,\n          enabled: false,\n          deleted: false,\n        });\n      }\n    });\n\n    return { childCategories, rootCategories };\n  }, [categoriesApiData]);\n};\n\nexport const useBuildedCategoryData = (): CategoryStructure[] => {\n  const { rootCategories, childCategories } = useCategoryDataStructure();\n  const { categories } = useStateSelector();\n\n  // map the categories in hirachical order based on the parent-child relationship\n  const setTreeStructure = (\n    rootItems: CategoryStructure[]\n  ): CategoryStructure[] => {\n    if (!rootItems.length) return rootItems;\n\n    rootItems.forEach((root) => {\n      const childItems = childCategories.filter(\n        (cat: Category) => cat.parent === root.id\n      );\n      // could have multiple subcategories for one parent\n      if (childItems && childItems.length) {\n        childItems.forEach((child) => {\n          if (!root.childCategories) root.childCategories = [];\n          root.childCategories.push({\n            ...child,\n            childCategories: [],\n          });\n\n          const index = childCategories.indexOf(child);\n          // make sure to remove subcategories once we added them to root object\n          childCategories.splice(index, 1);\n        });\n      }\n      return setTreeStructure(root.childCategories || []);\n    });\n    return rootItems;\n  }; // eslint-disable-next-line\n  return useMemo(() => setTreeStructure(rootCategories), [\n    rootCategories,\n    categories,\n  ]);\n};\n\nexport const useEnabledCategories = (): {\n  enableList: Category[];\n  deletedList: Category[];\n} => {\n  const { categories } = useStateSelector();\n\n  const enabledCategories: { [key: string]: Category } = {};\n  const deletedCategories: { [key: string]: Category } = {};\n  const checkCategories = (rootItems: CategoryStructure[]) => {\n    if (!rootItems.length) return null;\n\n    rootItems.forEach((root) => {\n      if (root.enabled) {\n        enabledCategories[root.id] = {\n          id: root.id,\n          name: root.name,\n          deleted: root.deleted,\n          enabled: root.enabled,\n          count: root.count,\n          parent: root.parent,\n        };\n      }\n      if (root.deleted) {\n        deletedCategories[root.id] = {\n          id: root.id,\n          name: root.name,\n          deleted: root.deleted,\n          enabled: root.enabled,\n          count: root.count,\n          parent: root.parent,\n        };\n      }\n\n      checkCategories(root.childCategories || []);\n    });\n  };\n  checkCategories(categories);\n\n  const enableList: Category[] = Object.values(enabledCategories);\n  const deletedList: Category[] = Object.values(deletedCategories);\n\n  return { enableList, deletedList };\n};\n\n// export const useUpdateCategoryStatus = () => {\n//   const { categories } = useStateSelector();\n\n//   const updateStatus = (ids: string[], enabled: boolean, deleted: boolean) => {\n//     const checkCategories = (rootItems: CategoryStructure[]) => {\n//       if (!rootItems.length) return null;\n\n//       rootItems.forEach((root) => {\n//         if (ids.includes(root.id)) {\n//           root.enabled = enabled;\n//           root.deleted = deleted;\n//         }\n\n//         checkCategories(root.childCategories || []);\n//       });\n//     };\n//     checkCategories(categories);\n//   };\n\n//   return { updateStatus };\n// };\n"]},"metadata":{},"sourceType":"module"}