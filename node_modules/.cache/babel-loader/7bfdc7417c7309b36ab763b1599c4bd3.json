{"ast":null,"code":"var _jsxFileName = \"/home/sachila/Projects/sample/gapstar/react/demo/src/components/Category/CategoryChildCheckboxFacets.tsx\",\n    _s = $RefreshSig$();\n\nimport { Checkbox } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { handleSelectAll } from \"../../services/CategoryService\";\nimport { updateCategory } from \"../../store/actions\";\nimport { ChildCategoryWrapper, FormControlLabelSelectAllContainer } from \"../../styles/elements\";\nimport { CategoryCheckboxFacets } from \"./CategoryCheckboxFacets\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CategoryChildCheckboxFacets = props => {\n  _s();\n\n  const {\n    category\n  } = props;\n  const dispatch = useDispatch();\n\n  if (!category || !category.childCategories) {\n    return null;\n  }\n\n  if (!category.enabled) return null;\n  if (category.deleted) return null;\n\n  const allChildrensAreSelected = category => {\n    var _category$childCatego;\n\n    if (!category.childCategories) return false;\n    return (_category$childCatego = category.childCategories) === null || _category$childCatego === void 0 ? void 0 : _category$childCatego.every(c => {\n      if (c.enabled) return true;\n      if (c.deleted) return true;\n      return false;\n    });\n  };\n\n  const handleSelectAllChange = async (event, categories) => {\n    handleSelectAll(event, async category => {\n      await dispatch(updateCategory(category));\n    }, categories);\n  };\n\n  const hasChildCategories = category.childCategories && category.childCategories.length > 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [hasChildCategories && /*#__PURE__*/_jsxDEV(ChildCategoryWrapper, {\n      children: /*#__PURE__*/_jsxDEV(FormControlLabelSelectAllContainer, {\n        control: /*#__PURE__*/_jsxDEV(Checkbox, {\n          id: `select_all - ${category.id}`,\n          checked: allChildrensAreSelected(category),\n          value: allChildrensAreSelected(category),\n          onChange: e => handleSelectAllChange(e, category.childCategories),\n          color: \"primary\"\n        }, `select_all-${category.id} - ${category.name}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }, this),\n        label: \"Select All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), !category.deleted && /*#__PURE__*/_jsxDEV(CategoryCheckboxFacets, {\n      childCategories: category.childCategories\n    }, category.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CategoryChildCheckboxFacets, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CategoryChildCheckboxFacets;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryChildCheckboxFacets\");","map":{"version":3,"sources":["/home/sachila/Projects/sample/gapstar/react/demo/src/components/Category/CategoryChildCheckboxFacets.tsx"],"names":["Checkbox","React","useDispatch","handleSelectAll","updateCategory","ChildCategoryWrapper","FormControlLabelSelectAllContainer","CategoryCheckboxFacets","CategoryChildCheckboxFacets","props","category","dispatch","childCategories","enabled","deleted","allChildrensAreSelected","every","c","handleSelectAllChange","event","categories","hasChildCategories","length","id","e","name"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,OAAOC,KAAP,MAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SACEC,oBADF,EAEEC,kCAFF,QAGO,uBAHP;AAIA,SAASC,sBAAT,QAAuC,0BAAvC;;;AAMA,OAAO,MAAMC,2BAA4C,GAAIC,KAAD,IAAW;AAAA;;AACrE,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AACA,QAAME,QAAQ,GAAGT,WAAW,EAA5B;;AAEA,MAAI,CAACQ,QAAD,IAAa,CAACA,QAAQ,CAACE,eAA3B,EAA4C;AAC1C,WAAO,IAAP;AACD;;AACD,MAAI,CAACF,QAAQ,CAACG,OAAd,EAAuB,OAAO,IAAP;AACvB,MAAIH,QAAQ,CAACI,OAAb,EAAsB,OAAO,IAAP;;AAEtB,QAAMC,uBAAuB,GAAIL,QAAD,IAA0C;AAAA;;AACxE,QAAI,CAACA,QAAQ,CAACE,eAAd,EAA+B,OAAO,KAAP;AAC/B,oCAAOF,QAAQ,CAACE,eAAhB,0DAAO,sBAA0BI,KAA1B,CAAiCC,CAAD,IAAO;AAC5C,UAAIA,CAAC,CAACJ,OAAN,EAAe,OAAO,IAAP;AACf,UAAII,CAAC,CAACH,OAAN,EAAe,OAAO,IAAP;AACf,aAAO,KAAP;AACD,KAJM,CAAP;AAKD,GAPD;;AASA,QAAMI,qBAAqB,GAAG,OAC5BC,KAD4B,EAE5BC,UAF4B,KAGzB;AACHjB,IAAAA,eAAe,CACbgB,KADa,EAEb,MAAOT,QAAP,IAAoB;AAClB,YAAMC,QAAQ,CAACP,cAAc,CAACM,QAAD,CAAf,CAAd;AACD,KAJY,EAKbU,UALa,CAAf;AAOD,GAXD;;AAaA,QAAMC,kBAA2B,GAC/BX,QAAQ,CAACE,eAAT,IAA4BF,QAAQ,CAACE,eAAT,CAAyBU,MAAzB,GAAkC,CADhE;AAGA,sBACE;AAAA,eACGD,kBAAkB,iBACjB,QAAC,oBAAD;AAAA,6BACE,QAAC,kCAAD;AACE,QAAA,OAAO,eACL,QAAC,QAAD;AAEE,UAAA,EAAE,EAAG,gBAAeX,QAAQ,CAACa,EAAG,EAFlC;AAGE,UAAA,OAAO,EAAER,uBAAuB,CAACL,QAAD,CAHlC;AAIE,UAAA,KAAK,EAAEK,uBAAuB,CAACL,QAAD,CAJhC;AAKE,UAAA,QAAQ,EAAGc,CAAD,IACRN,qBAAqB,CAACM,CAAD,EAAId,QAAQ,CAACE,eAAb,CANzB;AAQE,UAAA,KAAK,EAAC;AARR,WACQ,cAAaF,QAAQ,CAACa,EAAG,MAAKb,QAAQ,CAACe,IAAK,EADpD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAaE,QAAA,KAAK,EAAC;AAbR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,EAoBG,CAACf,QAAQ,CAACI,OAAV,iBACC,QAAC,sBAAD;AAEE,MAAA,eAAe,EAAEJ,QAAQ,CAACE;AAF5B,OACOF,QAAQ,CAACa,EADhB;AAAA;AAAA;AAAA;AAAA,YArBJ;AAAA,kBADF;AA6BD,CAhEM;;GAAMf,2B;UAEMN,W;;;KAFNM,2B","sourcesContent":["import { Checkbox } from \"@material-ui/core\";\nimport React, { ChangeEvent } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { CategoryStructure } from \"../../models/CategoryStructure\";\nimport { handleSelectAll } from \"../../services/CategoryService\";\nimport { updateCategory } from \"../../store/actions\";\nimport {\n  ChildCategoryWrapper,\n  FormControlLabelSelectAllContainer,\n} from \"../../styles/elements\";\nimport { CategoryCheckboxFacets } from \"./CategoryCheckboxFacets\";\n\ninterface Props {\n  category: CategoryStructure;\n}\n\nexport const CategoryChildCheckboxFacets: React.FC<Props> = (props) => {\n  const { category } = props;\n  const dispatch = useDispatch();\n\n  if (!category || !category.childCategories) {\n    return null;\n  }\n  if (!category.enabled) return null;\n  if (category.deleted) return null;\n\n  const allChildrensAreSelected = (category: CategoryStructure): boolean => {\n    if (!category.childCategories) return false;\n    return category.childCategories?.every((c) => {\n      if (c.enabled) return true;\n      if (c.deleted) return true;\n      return false;\n    });\n  };\n\n  const handleSelectAllChange = async (\n    event: ChangeEvent<HTMLInputElement>,\n    categories?: CategoryStructure[]\n  ) => {\n    handleSelectAll(\n      event,\n      async (category) => {\n        await dispatch(updateCategory(category));\n      },\n      categories\n    );\n  };\n\n  const hasChildCategories: boolean =\n    category.childCategories && category.childCategories.length > 0;\n\n  return (\n    <>\n      {hasChildCategories && (\n        <ChildCategoryWrapper>\n          <FormControlLabelSelectAllContainer\n            control={\n              <Checkbox\n                key={`select_all-${category.id} - ${category.name}`}\n                id={`select_all - ${category.id}`}\n                checked={allChildrensAreSelected(category)}\n                value={allChildrensAreSelected(category)}\n                onChange={(e) =>\n                  handleSelectAllChange(e, category.childCategories)\n                }\n                color=\"primary\"\n              />\n            }\n            label=\"Select All\"\n          />\n        </ChildCategoryWrapper>\n      )}\n      {!category.deleted && (\n        <CategoryCheckboxFacets\n          key={category.id}\n          childCategories={category.childCategories}\n        />\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}